{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red224\green240\blue255;
\red41\green101\blue168;\red11\green92\blue180;\red247\green238\blue241;\red61\green107\blue189;\red242\green242\blue242;
\red1\green18\blue44;\red4\green51\blue155;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c90196\c95294\c100000;
\cssrgb\c20000\c47843\c71765;\cssrgb\c0\c44706\c75686;\cssrgb\c97647\c94902\c95686;\cssrgb\c29804\c50588\c78824;\cssrgb\c96078\c96078\c96078;
\cssrgb\c0\c9804\c22745;\cssrgb\c0\c28235\c67059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl660\sa200\partightenfactor0

\f0\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Introduction\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b\fs30 \cf2 \cb4 Important submission note:
\b0 \'a0For full credit:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls1\ilvl0\cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Submit with Phase 1 complete by\'a0
\b Monday, January 29
\b0 \'a0(worth 1 pt).\'a0
\b You must work on this part on your own.
\b0 \cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Submit with Phases 2 and 3 complete by\'a0
\b Thursday, February 1
\b0 .\'a0
\b You may work with one other partner.
\b0 You will get an extra credit point for submitting the entire project by Wednesday, January 31.\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf2 \cb4 Please note that although the checkpoint date is only a few days from the final due date, you should not put off completing Phase 1. We recommend starting and finishing Phase 1 as soon as possible to give yourself adequate time to complete Phases 2 and 3, which are harder and more time consuming. You do\'a0
\i not
\i0 \'a0have to wait until after the checkpoint date to start Phases 2 and 3.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 In this project, you will develop a simulator and multiple strategies for the dice game Hog. You will need to use\'a0
\i control statements
\i0 \'a0and\'a0
\i higher-order functions
\i0 \'a0together, as described in Sections 1.2 through 1.6 of\'a0{\field{\*\fldinst{HYPERLINK "http://composingprograms.com/"}}{\fldrslt \cf5 \strokec5 Composing Programs}}.\
In Hog, two players alternate turns trying to be the first to end a turn with at least 100 total points. On each turn, the current player chooses some number of dice to roll, up to 10. That player's score for the turn is the sum of the dice outcomes.\
To spice up the game, we will play with some special rules:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls2\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Pig Out
\b0 . If any of the dice outcomes is a 1, the current player's score for the turn is 1.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\partightenfactor0
\ls2\ilvl1
\i \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 1
\i0 : The current player rolls 7 dice, 5 of which are 1's. They score 1 point for the turn.\cb1 \
\ls2\ilvl1
\i \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 2
\i0 : The current player rolls 4 dice, all of which are 3's. Since Pig Out did not occur, they score 12 points for the turn.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls2\ilvl0
\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Free Bacon
\b0 . A player who chooses to roll zero dice scores 2 more than the absolute difference between the digits in the opponent's total score.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\partightenfactor0
\ls2\ilvl1
\i \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 1
\i0 : If the opponent has 42 points, the current player gains 2 + abs(4 - 2) = 4 points by rolling zero dice.\cb1 \
\ls2\ilvl1
\i \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 2
\i0 : If the opponent has 48 points, the current player gains 2 + abs(4 - 8) = 6 points by rolling zero dice.\cb1 \
\ls2\ilvl1
\i \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 3
\i0 : If the opponent has 7 points, the current player gains 2 + abs(0 - 7) = 9 points by rolling zero dice.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls2\ilvl0
\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Swine Swap
\b0 . After points for the turn are added to the current player's score, if both scores are larger than 1 and either one of the scores is a positive integer multiple of the other, then the two scores are swapped.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl340\partightenfactor0
\ls2\ilvl1
\i \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 1
\i0 : The current player has a total score of 37 and the opponent has 92. The current player rolls two dice that total 9. The opponent's score (92) is exactly twice the player's new total score (46). These scores are swapped! The current player now has 92 points and the opponent has 46. The turn ends.\cb1 \
\ls2\ilvl1
\i \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1\i0 \uc0\u9702 
\f0\i 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 2
\i0 : The current player has 91 and the opponent has 37. The current player rolls five dice that total 20. The current player has 111, which is 3 times 37, so the scores are swapped. The opponent ends the turn with 111 and wins the game.\cb1 \
\pard\pardeftab720\sl660\sa200\partightenfactor0

\fs60 \cf2 \cb3 Download starter files\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 To get started, download all of the project code as a\'a0{\field{\*\fldinst{HYPERLINK "https://inst.eecs.berkeley.edu/~cs61a/sp18/proj/hog/hog.zip"}}{\fldrslt \cf5 \strokec5 zip archive}}. You only have to make changes to\'a0
\f2 \cf6 \cb7 \strokec6 hog.py
\f0 \cf2 \cb3 \strokec2 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hog.py
\f0 \cf2 \cb3 \strokec2 : A starter implementation of Hog\cb1 \
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 dice.py
\f0 \cf2 \cb3 \strokec2 : Functions for rolling dice\cb1 \
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hog_gui.py
\f0 \cf2 \cb3 \strokec2 : A graphical user interface for Hog\cb1 \
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ucb.py
\f0 \cf2 \cb3 \strokec2 : Utility functions for CS 61A\cb1 \
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ok
\f0 \cf2 \cb3 \strokec2 : CS 61A autograder\cb1 \
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 tests
\f0 \cf2 \cb3 \strokec2 : A directory of tests used by\'a0
\f2 \cf6 \cb7 \strokec6 ok
\f0 \cf2 \cb1 \strokec2 \
\ls3\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 images
\f0 \cf2 \cb3 \strokec2 : A directory of images used by\'a0
\f2 \cf6 \cb7 \strokec6 hog_gui.py
\f0 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl660\sa200\partightenfactor0

\fs60 \cf2 \cb3 Logistics\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 This is a 2-week project. This project has two parts:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls4\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Part I:
\b0 \'a0Complete Phase 1 of the project and submit by\'a0
\b Monday, January 29
\b0 .\'a0
\b You must work on this part on your own.
\b0 \'a0You should not share your code from this part with any other students (except with your partner in Part II after you've both completed Part I). This is worth 1 point of your project grade; you must pass all OK tests for Phase 1 in order to receive this point.\cb1 \
\ls4\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Part II:
\b0 \'a0Complete Phases 2 and 3 of the project and submit by\'a0
\b Thursday, February 1
\b0 .\'a0
\b You may work with one other partner.
\b0 \'a0You may share your code from Part 1 with your partner. You should not share any part of your code with students who are not your partner or copy from anyone else's solutions. In the end, you will submit one project for both partners.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 \
You can earn an additional bonus point by submitting Part II of the project at least 24 hours before the deadline.\
\
The project is worth 20 points. 17 points are assigned for correctness, 1 point for submitting Part I by the checkpoint date, and 2 points for the overall\'a0{\field{\*\fldinst{HYPERLINK "https://inst.eecs.berkeley.edu/~cs61a/sp18/proj/hog/"}}{\fldrslt \cf5 \strokec5 composition}}.\
You will turn in the following files:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls5\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hog.py
\f0 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 You do not need to modify or turn in any other files to complete the project. To submit the project, run the following command:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok --submit\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 You will be able to view your submissions on the\'a0{\field{\*\fldinst{HYPERLINK "http://ok.cs61a.org/"}}{\fldrslt \cf5 \strokec5 Ok dashboard}}.\
For the functions that we ask you to complete, there may be some initial code that we provide. If you would rather not use that code, feel free to delete it and start from scratch. You may also add new function definitions as you see fit.\
However, please do\'a0
\b not
\b0 \'a0modify any other functions. Doing so may result in your code failing our autograder tests. Also, please do not change any function signatures (names, argument order, or number of arguments).\
Throughout this project, you should be testing the correctness of your code. It is good practice to test often, so that it is easy to isolate any problems. However, you should not be testing\'a0
\i too
\i0 \'a0often, to allow yourself time to think through problems.\
We have provided an\'a0
\b autograder
\b0 \'a0called\'a0
\f2 \cf6 \cb7 \strokec6 ok
\f0 \cf2 \cb3 \strokec2 \'a0to help you with testing your code and tracking your progress. The first time you run the autograder, you will be asked to\'a0
\b log in with your Ok account using your web browser
\b0 . Please do so. Each time you run\'a0
\f2 \cf6 \cb7 \strokec6 ok
\f0 \cf2 \cb3 \strokec2 , it will back up your work and progress on our servers.\
The primary purpose of\'a0
\f2 \cf6 \cb7 \strokec6 ok
\f0 \cf2 \cb3 \strokec2 \'a0is to test your implementations, but there are two things you should be aware of.\
First, some of the test cases are\'a0
\i locked
\i0 . To unlock tests, run the following command from your terminal:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 This command will start an interactive prompt that looks like:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf2 \cb9 =====================================================================\
Assignment: The Game of Hog\
Ok, version ...\
=====================================================================\
\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
Unlocking tests\
\
At each "? ", type what you would expect the output to be.\
Type exit() to quit\
\
---------------------------------------------------------------------\
Question 0 > Suite 1 > Case 1\
(cases remaining: 1)\
\
>>> Code here\
?\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 At the\'a0
\f2 \cf6 \cb7 \strokec6 ?
\f0 \cf2 \cb3 \strokec2 , you can type what you expect the output to be. If you are correct, then this test case will be available the next time you run the autograder.\
The idea is to understand\'a0
\i conceptually
\i0 \'a0what your program should do first, before you start writing any code.\
Once you have unlocked some tests and written some code, you can check the correctness of your program using the tests that you have unlocked:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf2 \cb9 python3 ok\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 Most of the time, you will want to focus on a particular question. Use the\'a0
\f2 \cf6 \cb7 \strokec6 -q
\f0 \cf2 \cb3 \strokec2 \'a0option as directed in the problems below.\
We recommend that you submit\'a0
\b after you finish each problem
\b0 . Only your last submission will be graded. It is also useful for us to have more backups of your code in case you run into a submission issue.\
The\'a0
\f2 \cf6 \cb7 \strokec6 tests
\f0 \cf2 \cb3 \strokec2 \'a0folder is used to store autograder tests, so\'a0
\b do not modify it
\b0 . You may lose all your unlocking progress if you do. If you need to get a fresh copy, you can download the\'a0{\field{\*\fldinst{HYPERLINK "https://inst.eecs.berkeley.edu/~cs61a/sp18/proj/hog/hog.zip"}}{\fldrslt \cf5 \strokec5 zip archive}}\'a0and copy it over, but you will need to start unlocking from scratch.\
If you do not want us to record a backup of your work or information about your progress, use the\'a0
\f2 \cf6 \cb7 \strokec6 --local
\f0 \cf2 \cb3 \strokec2 option when invoking\'a0
\f2 \cf6 \cb7 \strokec6 ok
\f0 \cf2 \cb3 \strokec2 . With this option, no information will be sent to our course servers.\
\pard\pardeftab720\sl660\sa200\partightenfactor0

\fs60 \cf2 Graphical User Interface\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 A\'a0
\b graphical user interface
\b0 \'a0(GUI, for short) is provided for you. At the moment, it doesn't work because you haven't implemented the game logic. Once you complete the\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb3 \strokec2 \'a0function, you will be able to play a fully interactive version of Hog!\
In order to render the graphics, make sure you have Tkinter, Python's main graphics library, installed on your computer. Once you've done that, you can run the GUI from your terminal:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 hog_gui.py\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you complete the project, if you completed the optional Problem 12, you can play against the final strategy that you've created!\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 hog_gui.py -f\
\pard\pardeftab720\sl660\sa200\partightenfactor0

\f0\fs60 \cf2 \cb3 \strokec2 Phase 1: Simulator\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b\fs30 \cf2 \cb4 Important submission note:
\b0 \'a0For full credit:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls6\ilvl0\cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 submit with Phase 1 complete by\'a0
\b Monday, January 29
\b0 \'a0(worth 1 pt).\cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\b \cf2 \cb4 You must work on this part on your own.
\b0 \'a0All Phase 1 tests must pass in order to receive this point.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 In the first phase, you will develop a simulator for the game of Hog.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 0 (0 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 The\'a0
\f2 \cf6 \cb7 \strokec6 dice.py
\f0 \cf2 \cb3 \strokec2 \'a0file represents dice using non-pure zero-argument functions. These functions are non-pure because they may have different return values each time they are called. The documentation of\'a0
\f2 \cf6 \cb7 \strokec6 dice.py
\f0 \cf2 \cb3 \strokec2 \'a0describes the two different types of dice used in the project:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Dice can be fair, meaning that they produce each possible outcome with equal probability. Example:\'a0
\f2 \cf6 \cb7 \strokec6 six_sided
\f0 \cf2 \cb3 \strokec2 .\cb1 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 For testing functions that use dice, deterministic test dice always cycle through a fixed sequence of values that are passed as arguments to the\'a0
\f2 \cf6 \cb7 \strokec6 make_test_dice
\f0 \cf2 \cb3 \strokec2 \'a0function.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 Before we start writing any code, read over the\'a0
\f2 \cf6 \cb7 \strokec6 dice.py
\f0 \cf2 \cb3 \strokec2 \'a0file and check your understanding by unlocking the following tests.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 00 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 This should display a prompt that looks like this:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 =====================================================================\
\cf8 \strokec8 Assignment:\cf10 \strokec10  Project 1: Hog\
Ok, version v1.5.2\
=====================================================================\
\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
Unlocking tests\
\
At each \cf11 \strokec11 "? "\cf10 \strokec10 , type what you would expect the output to be.\
Type exit() to quit\
\
---------------------------------------------------------------------\
Question 0 > Suite 1 > Case 1\
(cases \cf8 \strokec8 remaining:\cf10 \strokec10  1)\
\
>>> test_dice = make_test_dice(4, 1, 2)\
>>> test_dice()\
?\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 You should type in what you expect the output to be. To do so, you need to first figure out what\'a0
\f2 \cf6 \cb7 \strokec6 test_dice
\f0 \cf2 \cb3 \strokec2 \'a0will do, based on the description above.\
You can exit the unlocker by typing\'a0
\f2 \cf6 \cb7 \strokec6 exit()
\f0 \cf2 \cb3 \strokec2 \'a0(without quotes).\'a0
\b Typing Ctrl-C on Windows to exit out of the unlocker has been known to cause problems, so avoid doing so.
\b0 \
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 1 (2 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 \'a0function in\'a0
\f2 \cf6 \cb7 \strokec6 hog.py
\f0 \cf2 \cb3 \strokec2 . It takes two arguments: a positive integer called\'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 \'a0giving the number of dice to roll and a\'a0
\f2 \cf6 \cb7 \strokec6 dice
\f0 \cf2 \cb3 \strokec2 \'a0function. It returns the number of points scored by rolling the dice that number of times in a turn: either the sum of the outcomes or 1 (
\i Pig Out
\i0 ).\
To obtain a single outcome of a dice roll, call\'a0
\f2 \cf6 \cb7 \strokec6 dice()
\f0 \cf2 \cb3 \strokec2 . You should call\'a0
\f2 \cf6 \cb7 \strokec6 dice()
\f0 \cf2 \cb3 \strokec2 \'a0exactly\'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 \'a0times in the body of\'a0
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 . Remember to call\'a0
\f2 \cf6 \cb7 \strokec6 dice()
\f0 \cf2 \cb3 \strokec2 \'a0exactly\'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 \'a0times even if Pig Out happens in the middle of rolling. In this way, we correctly simulate rolling all the dice together.\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b \cf2 Understand the problem
\b0 :\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 01 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 Write code and check your work
\b0 :\
Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 01\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 Debugging your code interactively
\b0 :\
If the tests don't pass, it's time to debug. You can observe the behavior of your function using Python directly. First, start the Python interpreter and load the\'a0
\f2 \cf6 \cb7 \strokec6 hog.py
\f0 \cf2 \cb3 \strokec2 \'a0file.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 -i hog.py\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Then, you can call your\'a0
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 \'a0function on any number of dice you want. The\'a0
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 \'a0function has a\'a0{\field{\*\fldinst{HYPERLINK "http://composingprograms.com/pages/14-designing-functions.html#default-argument-values"}}{\fldrslt \cf5 \strokec5 default argument value}}\'a0for\'a0
\f2 \cf6 \cb7 \strokec6 dice
\f0 \cf2 \cb3 \strokec2 \'a0that is a random six-sided dice function. Therefore, the following call to\'a0
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 \'a0simulates rolling four fair six-sided dice.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 >>> roll_dice(4)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 You will find that the previous expression may have a different result each time you call it, since it is simiulating random dice rolls. You can also use test dice that fix the outcomes of the dice in advance. For example, rolling twice when you know that the dice will come up 3 and 4 should give a total outcome of 7.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 >>> fixed_dice = make_test_dice(3, 4)\
>>> roll_dice(2, dice=fixed_dice)\
7\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb4 \strokec2 On most systems, you can evaluate the same expression again by pressing the up arrow or Control-P, then pressing enter or return.\cb1 \
\pard\pardeftab720\sl340\partightenfactor0
\cf2 \cb4 If you find a problem, you need to change your\'a0
\f2 \cf6 \cb7 \strokec6 hog.py
\f0 \cf2 \cb4 \strokec2 \'a0file, save it, quit Python, start it again, and then start evaluating expressions. Pressing the up arrow should give you access to your previous expressions, even after restarting Python.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 Continue debugging your code and running the\'a0
\f2 \cf6 \cb7 \strokec6 ok
\f0 \cf2 \cb3 \strokec2 \'a0tests until they all pass. You should follow this same procedure of understanding the problem, implementing a solution, testing, and debugging for all the problems on this project.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 2 (1 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 free_bacon
\f0 \cf2 \cb3 \strokec2 \'a0helper function that returns the number of points scored by rolling 0 dice, based on the opponent's current\'a0
\f2 \cf6 \cb7 \strokec6 score
\f0 \cf2 \cb3 \strokec2 . You can assume that\'a0
\f2 \cf6 \cb7 \strokec6 score
\f0 \cf2 \cb3 \strokec2 \'a0is less than 100. For a score less than 10, assume that the first of the two digits is 0.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 02 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 02\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 As noted above, you can also test\'a0
\f2 \cf6 \cb7 \strokec6 free_bacon
\f0 \cf2 \cb3 \strokec2 \'a0interactively by entering\'a0
\f2 \cf6 \cb7 \strokec6 python3 -i hog.py
\f0 \cf2 \cb3 \strokec2 \'a0in the terminal and then calling\'a0
\f2 \cf6 \cb7 \strokec6 free_bacon
\f0 \cf2 \cb3 \strokec2 \'a0with various inputs.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 3 (1 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 take_turn
\f0 \cf2 \cb3 \strokec2 \'a0function, which returns the number of points scored for a turn by rolling the given\'a0
\f2 \cf6 \cb7 \strokec6 dice
\f0 \cf2 \cb3 \strokec2 \'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 \'a0times.\
You will need to implement the\'a0
\i Free Bacon
\i0 \'a0rule based on\'a0
\f2 \cf6 \cb7 \strokec6 opponent_score
\f0 \cf2 \cb3 \strokec2 , which you can assume is less than 100.\
Your implementation of\'a0
\f2 \cf6 \cb7 \strokec6 take_turn
\f0 \cf2 \cb3 \strokec2 \'a0should call both\'a0
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2 \cf6 \cb7 \strokec6 free_bacon
\f0 \cf2 \cb3 \strokec2 \'a0when possible.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 03 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 03\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f0\fs48 \cf2 \cb3 \strokec2 Problem 4 (1 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement\'a0
\f2 \cf6 \cb7 \strokec6 is_swap
\f0 \cf2 \cb3 \strokec2 , which returns whether or not the scores should be swapped because one is an integer multiple of the other.\
The\'a0
\f2 \cf6 \cb7 \strokec6 is_swap
\f0 \cf2 \cb3 \strokec2 \'a0function takes two arguments: the players' scores. It returns a boolean value to indicate whether the\'a0
\i Swine Swap
\i0 \'a0condition is met.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 04 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 04\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f0\fs48 \cf2 \cb3 \strokec2 Problem 5 (2 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb3 \strokec2 \'a0function, which simulates a full game of Hog. Players alternate turns, each using their respective strategy function (Player 0 uses\'a0
\f2 \cf6 \cb7 \strokec6 strategy0
\f0 \cf2 \cb3 \strokec2 , etc.), until one of the players reaches the\'a0
\f2 \cf6 \cb7 \strokec6 goal
\f0 \cf2 \cb3 \strokec2 \'a0score. When the game ends,\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb3 \strokec2 \'a0returns the final total scores of both players, with Player 0's score first, and Player 1's score second.\
Here are some hints:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls8\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You should use the functions you have already written! You will need to call\'a0
\f2 \cf6 \cb7 \strokec6 take_turn
\f0 \cf2 \cb3 \strokec2 \'a0with all three arguments.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Only call\'a0
\f2 \cf6 \cb7 \strokec6 take_turn
\f0 \cf2 \cb3 \strokec2 \'a0once per turn.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Enforce all the special rules.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can get the number of the other player (either 0 or 1) by calling the provided function\'a0
\f2 \cf6 \cb7 \strokec6 other
\f0 \cf2 \cb3 \strokec2 .\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can ignore the\'a0
\f2 \cf6 \cb7 \strokec6 say
\f0 \cf2 \cb3 \strokec2 \'a0argument to the\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb3 \strokec2 \'a0function for now. You will use it in Phase 2 of the project.\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A\'a0
\i strategy
\i0 \'a0is a function that, given a player's score and their opponent's score, returns how many dice the player wants to roll. A strategy function (such as\'a0
\f2 \cf6 \cb7 \strokec6 strategy0
\f0 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2 \cf6 \cb7 \strokec6 strategy1
\f0 \cf2 \cb3 \strokec2 ) takes two arguments: scores for the current player and opposing player, which both must be non-negative integers. A strategy function returns the number of dice that the current player wants to roll in the turn. Each strategy function should be called only once per turn. Don't worry about the details of implementing strategies yet. You will develop them in Phase 3.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 05 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 05\
\pard\pardeftab720\sl340\partightenfactor0

\f0 \cf2 \cb4 \strokec2 The last test for Question 5 is a\'a0
\i fuzz test
\i0 , which checks that your\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb4 \strokec2 \'a0function works for a large number of different inputs. Failing this test means something is wrong, but you should look at other tests to see where the problem might be.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 Once you are finished, you will be able to play a graphical version of the game. We have provided a file called\'a0
\f2 \cf6 \cb7 \strokec6 hog_gui.py
\f0 \cf2 \cb3 \strokec2 \'a0that you can run from the terminal:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 hog_gui.py\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 If you don't already have Tkinter (Python's graphics library) installed, you'll need to install it first before you can run the GUI.\
The GUI relies on your implementation, so if you have any bugs in your code, they will be reflected in the GUI. This means you can also use the GUI as a debugging tool; however, it's better to run the tests first.\
Congratulations! You have finished Phase 1 of this project!\
\pard\pardeftab720\sl660\sa200\partightenfactor0

\fs60 \cf2 Phase 2: Commentary\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\b\fs30 \cf2 \cb4 Important submission note:
\b0 \'a0For full credit:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls9\ilvl0\cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 submit with Phase 2 and 3 complete by\'a0
\b Thursday, February 1
\b0 .\cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\b \cf2 \cb4 You may work with one other partner.
\b0 \'a0You will get an extra credit point for submitting the entire project by Wednesday, January 31.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 In the second phase, you will implement commentary functions that print remarks about the game after each turn, such as,\'a0
\f2 \cf6 \cb7 \strokec6 "22 points! That's the biggest gain yet for Player 1."
\f0 \cf2 \cb3 \strokec2 \
A commentary function takes two arguments, Player 0's current score and Player 1's current score. It can print out commentary based on either or both current scores and possibly even previous scores. Since commentary can differ from turn to turn depending on the current point situation in the game, commentary functions return another commentary function to be called on the next turn. The only side effect of a commentary function should be to print.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Commentary examples\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 The function\'a0
\f2 \cf6 \cb7 \strokec6 say_scores
\f0 \cf2 \cb3 \strokec2 \'a0in\'a0
\f2 \cf6 \cb7 \strokec6 hog.py
\f0 \cf2 \cb3 \strokec2 \'a0is an example of a commentary function that simply announces both players' scores. Note that\'a0
\f2 \cf6 \cb7 \strokec6 say_scores
\f0 \cf2 \cb3 \strokec2 \'a0returns a reference to itself, meaning that the same commentary function will be called each turn.\
\pard\pardeftab720\sl420\partightenfactor0

\f3\b \cf10 \cb9 \strokec10 def
\f2\b0  
\f3\b \cf11 \strokec11 say_scores
\f2\b0 \cf10 \strokec10 (score0, score1):\
    \cf11 \strokec11 """A commentary function that announces the score for each player."""\cf10 \strokec10 \
    print(\cf11 \strokec11 "Player 0 now has"\cf10 \strokec10 , score0, \cf11 \strokec11 "and Player 1 now has"\cf10 \strokec10 , score1)\
    
\f3\b return
\f2\b0  say_scores\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 The function\'a0
\f2 \cf6 \cb7 \strokec6 announce_lead_changes
\f0 \cf2 \cb3 \strokec2 \'a0is an example of a higher-order function that returns a commentary function that tracks lead changes.\
\pard\pardeftab720\sl420\partightenfactor0

\f3\b \cf10 \cb9 \strokec10 def
\f2\b0  
\f3\b \cf11 \strokec11 announce_lead_changes
\f2\b0 \cf10 \strokec10 (previous_leader=None):\
    \cf11 \strokec11 """Return a commentary function that announces lead changes.\
\
    >>> f0 = announce_lead_changes()\
    >>> f1 = f0(5, 0)\
    Player 0 takes the lead by 5\
    >>> f2 = f1(5, 12)\
    Player 1 takes the lead by 7\
    >>> f3 = f2(8, 12)\
    >>> f4 = f3(8, 13)\
    >>> f5 = f4(15, 13)\
    Player 0 takes the lead by 2\
    """\cf10 \strokec10 \
    
\f3\b def
\f2\b0  
\f3\b \cf11 \strokec11 say
\f2\b0 \cf10 \strokec10 (score0, score1):\
        
\f3\b if
\f2\b0  score0 > score1:\
            leader = 0\
        
\f3\b elif
\f2\b0  score1 > score0:\
            leader = 1\
        
\f3\b else
\f2\b0 :\
            leader = 
\f3\b None
\f2\b0 \
        
\f3\b if
\f2\b0  leader != 
\f3\b None
\f2\b0  
\f3\b and
\f2\b0  leader != previous_leader:\
            print(\cf11 \strokec11 'Player'\cf10 \strokec10 , leader, \cf11 \strokec11 'takes the lead by'\cf10 \strokec10 , abs(score0 - score1))\
        
\f3\b return
\f2\b0  announce_lead_changes(leader)\
    
\f3\b return
\f2\b0  say\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 You should also understand the function\'a0
\f2 \cf6 \cb7 \strokec6 both
\f0 \cf2 \cb3 \strokec2 , which takes two commentary functions (
\f2 \cf6 \cb7 \strokec6 f
\f0 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2 \cf6 \cb7 \strokec6 g
\f0 \cf2 \cb3 \strokec2 ) and returns a\'a0
\i new
\i0 \'a0commentary function. This returned commentary function returns\'a0
\i another
\i0 \'a0commentary function which calls the functions returned by calling\'a0
\f2 \cf6 \cb7 \strokec6 f
\f0 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2 \cf6 \cb7 \strokec6 g
\f0 \cf2 \cb3 \strokec2 , in that order.\
\pard\pardeftab720\sl420\partightenfactor0

\f3\b \cf10 \cb9 \strokec10 def
\f2\b0  
\f3\b \cf11 \strokec11 both
\f2\b0 \cf10 \strokec10 (f, g):\
    \cf11 \strokec11 """Return a commentary function that says what f says, then what g says.\
\
    >>> h0 = both(say_scores, announce_lead_changes())\
    >>> h1 = h0(10, 0)\
    Player 0 now has 10 and Player 1 now has 0\
    Player 0 takes the lead by 10\
    >>> h2 = h1(10, 6)\
    Player 0 now has 10 and Player 1 now has 6\
    >>> h3 = h2(6, 18) # Player 0 gets 8 points, then Swine Swap applies\
    Player 0 now has 6 and Player 1 now has 18\
    Player 1 takes the lead by 12\
    """\cf10 \strokec10 \
    
\f3\b def
\f2\b0  
\f3\b \cf11 \strokec11 say
\f2\b0 \cf10 \strokec10 (score0, score1):\
        
\f3\b return
\f2\b0  both(f(score0, score1), g(score0, score1))\
    
\f3\b return
\f2\b0  say\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f0\fs48 \cf2 \cb3 \strokec2 Problem 6 (2 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Update your\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb3 \strokec2 \'a0function so that a commentary function is called at the end of each turn. The return value of calling a commentary function gives you the commentary function to call on the next turn.\
For example,\'a0
\f2 \cf6 \cb7 \strokec6 say(score0, score1)
\f0 \cf2 \cb3 \strokec2 \'a0should be called at the end of the first turn. Its return value (another commentary function) should be called at the end of the second turn. Each consecutive turn, call the function that was returned by the call to the previous turn's commentary function.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 06 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 06\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f0\fs48 \cf2 \cb3 \strokec2 Problem 7 (2 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 announce_highest
\f0 \cf2 \cb3 \strokec2 \'a0function, which is a higher-order function that returns a commentary function. This commentary function announces whenever a particular player gains more points in a turn than ever before. To compute the gain, it must compare the score from last turn to the score from this turn for the player of interest, which is designated by the\'a0
\f2 \cf6 \cb7 \strokec6 who
\f0 \cf2 \cb3 \strokec2 \'a0argument. This function must also keep track of the highest gain for the player so far.\
The way in which\'a0
\f2 \cf6 \cb7 \strokec6 announce_highest
\f0 \cf2 \cb3 \strokec2 \'a0announces is very specific, and your implementation should match the doctests provided. Notice in particular that if the gain is only 1 point, then the message includes "point" in singular form. If the gain is larger, then the message includes "points" in plural form.\
Use Ok to test your code:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf2 \cb9 python3 ok -q 07\
\pard\pardeftab720\sl340\partightenfactor0

\f0\b \cf2 \cb4 Hint.
\b0 \'a0The\'a0
\f2 \cf6 \cb7 \strokec6 announce_lead_changes
\f0 \cf2 \cb4 \strokec2 \'a0function provided to you is an example of how to keep track of information using commentary functions. If you are stuck, first make sure you understand how\'a0
\f2 \cf6 \cb7 \strokec6 announce_lead_changes
\f0 \cf2 \cb4 \strokec2 works.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 When you are done, if play the game again, you will see the commentary.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 hog_gui.py\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 The commentary in the GUI is generated by passing the following function as the\'a0
\f2 \cf6 \cb7 \strokec6 say
\f0 \cf2 \cb3 \strokec2 \'a0argument to\'a0
\f2 \cf6 \cb7 \strokec6 play
\f0 \cf2 \cb3 \strokec2 .\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 both(announce_highest(0), both(announce_highest(1), announce_lead_changes()))\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Great work! You just finished Phase 2 of the project!\
\pard\pardeftab720\sl660\sa200\partightenfactor0

\fs60 \cf2 Phase 3: Strategies\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 In the third phase, you will experiment with ways to improve upon the basic strategy of always rolling a fixed number of dice. First, you need to develop some tools to evaluate strategies.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 8 (2 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 make_averaged
\f0 \cf2 \cb3 \strokec2 \'a0function, which is a higher-order function that takes a function\'a0
\f2 \cf6 \cb7 \strokec6 fn
\f0 \cf2 \cb3 \strokec2 \'a0as an argument. It returns another function that takes the same number of arguments as\'a0
\f2 \cf6 \cb7 \strokec6 fn
\f0 \cf2 \cb3 \strokec2 \'a0(the function originally passed into
\f2 \cf6 \cb7 \strokec6 make_averaged
\f0 \cf2 \cb3 \strokec2 ). This returned function differs from the input function in that it returns the average value of repeatedly calling\'a0
\f2 \cf6 \cb7 \strokec6 fn
\f0 \cf2 \cb3 \strokec2 \'a0on the same arguments. This function should call\'a0
\f2 \cf6 \cb7 \strokec6 fn
\f0 \cf2 \cb3 \strokec2 \'a0a total of\'a0
\f2 \cf6 \cb7 \strokec6 num_samples
\f0 \cf2 \cb3 \strokec2 \'a0times and return the average of the results.\
To implement this function, you need a new piece of Python syntax! You must write a function that accepts an arbitrary number of arguments, then calls another function using exactly those arguments. Here's how it works.\
Instead of listing formal parameters for a function, we write\'a0
\f2 \cf6 \cb7 \strokec6 *args
\f0 \cf2 \cb3 \strokec2 . To call another function using exactly those arguments, we call it again with\'a0
\f2 \cf6 \cb7 \strokec6 *args
\f0 \cf2 \cb3 \strokec2 . For example,\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 >>> 
\f3\b def
\f2\b0  
\f3\b \cf11 \strokec11 printed
\f2\b0 \cf10 \strokec10 (fn):\
...     
\f3\b def
\f2\b0  
\f3\b \cf11 \strokec11 print_and_return
\f2\b0 \cf10 \strokec10 (*args):\
...         result = fn(*args)\
...         print(\cf11 \strokec11 'Result:'\cf10 \strokec10 , result)\
...         
\f3\b return
\f2\b0  result\
...     
\f3\b return
\f2\b0  print_and_return\
>>> printed_pow = printed(pow)\
>>> printed_pow(2, 8)\
Result: 256\
256\
>>> printed_abs = printed(abs)\
>>> printed_abs(-10)\
Result: 10\
10\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Read the docstring for\'a0
\f2 \cf6 \cb7 \strokec6 make_averaged
\f0 \cf2 \cb3 \strokec2 \'a0carefully to understand how it is meant to work.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 08 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 08\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f0\fs48 \cf2 \cb3 \strokec2 Problem 9 (1 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement the\'a0
\f2 \cf6 \cb7 \strokec6 max_scoring_num_rolls
\f0 \cf2 \cb3 \strokec2 \'a0function, which runs an experiment to determine the number of rolls (from 1 to 10) that gives the maximum average score for a turn. Your implementation should use\'a0
\f2 \cf6 \cb7 \strokec6 make_averaged
\f0 \cf2 \cb3 \strokec2 \'a0and
\f2 \cf6 \cb7 \strokec6 roll_dice
\f0 \cf2 \cb3 \strokec2 .\
If two numbers of rolls are tied for the maximum average score, return the lower number. For example, if both 3 and 6 achieve a maximum average score, return 3.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 09 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 09\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 To run this experiment on randomized dice, call\'a0
\f2 \cf6 \cb7 \strokec6 run_experiments
\f0 \cf2 \cb3 \strokec2 \'a0using the\'a0
\f2 \cf6 \cb7 \strokec6 -r
\f0 \cf2 \cb3 \strokec2 \'a0option:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 hog.py -r\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 Running experiments
\b0 \'a0For the remainder of this project, you can change the implementation of\'a0
\f2 \cf6 \cb7 \strokec6 run_experiments
\f0 \cf2 \cb3 \strokec2 as you wish. By calling\'a0
\f2 \cf6 \cb7 \strokec6 average_win_rate
\f0 \cf2 \cb3 \strokec2 , you can evaluate various Hog strategies. For example, change the first\'a0
\f2 \cf6 \cb7 \strokec6 if False:
\f0 \cf2 \cb3 \strokec2 \'a0to\'a0
\f2 \cf6 \cb7 \strokec6 if True:
\f0 \cf2 \cb3 \strokec2 \'a0in order to evaluate\'a0
\f2 \cf6 \cb7 \strokec6 always_roll(8)
\f0 \cf2 \cb3 \strokec2 \'a0against the baseline strategy of\'a0
\f2 \cf6 \cb7 \strokec6 always_roll(4)
\f0 \cf2 \cb3 \strokec2 . You should find that it wins slightly more often than it loses, giving a win rate around 0.5.\
Some of the experiments may take up to a minute to run. You can always reduce the number of samples in\'a0
\f2 \cf6 \cb7 \strokec6 make_averaged
\f0 \cf2 \cb3 \strokec2 \'a0to speed up experiments.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 10 (1 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 A strategy can take advantage of the\'a0
\i Free Bacon
\i0 \'a0rule by rolling 0 when it is most beneficial to do so. Implement\'a0
\f2 \cf6 \cb7 \strokec6 bacon_strategy
\f0 \cf2 \cb3 \strokec2 , which returns 0 whenever rolling 0 would give\'a0
\b at least
\b0 \'a0
\f2 \cf6 \cb7 \strokec6 margin
\f0 \cf2 \cb3 \strokec2 \'a0points and returns\'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 otherwise.\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 10 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 10\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you have implemented this strategy, change\'a0
\f2 \cf6 \cb7 \strokec6 run_experiments
\f0 \cf2 \cb3 \strokec2 \'a0to evaluate your new strategy against the baseline. You should find that it wins more than half of the time.\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Problem 11 (2 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 A strategy can also take advantage of the\'a0
\i Swine Swap
\i0 \'a0rule. The\'a0
\f2 \cf6 \cb7 \strokec6 swap_strategy
\f0 \cf2 \cb3 \strokec2 \'a0rolls 0 if it would cause a beneficial swap. It also returns 0 if rolling 0 would give\'a0
\b at least
\b0 \'a0
\f2 \cf6 \cb7 \strokec6 margin
\f0 \cf2 \cb3 \strokec2 \'a0points and would not cause a swap. Otherwise, the strategy rolls\'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 .\
Before writing any code, unlock the tests to verify your understanding of the question.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 11 -u\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are done unlocking, begin implementing your solution. You can check your correctness with:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 11\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you have implemented this strategy, update\'a0
\f2 \cf6 \cb7 \strokec6 run_experiments
\f0 \cf2 \cb3 \strokec2 \'a0to evaluate your new strategy against the baseline. You should find that it gives a significant edge over\'a0
\f2 \cf6 \cb7 \strokec6 always_roll(4)
\f0 \cf2 \cb3 \strokec2 .\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\fs48 \cf2 Optional: Problem 12 (0 pt)\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\fs30 \cf2 Implement\'a0
\f2 \cf6 \cb7 \strokec6 final_strategy
\f0 \cf2 \cb3 \strokec2 , which combines these ideas and any other ideas you have to achieve a high win rate against the\'a0
\f2 \cf6 \cb7 \strokec6 always_roll(4)
\f0 \cf2 \cb3 \strokec2 \'a0strategy. Some suggestions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls10\ilvl0
\f2 \cf6 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 swap_strategy
\f0 \cf2 \cb3 \strokec2 \'a0is a good default strategy to start with.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 There's no point in scoring more than 100. Check whether you can win by rolling 0, 1 or 2 dice. If you are in the lead, you might take fewer risks.\cb1 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Try to force a beneficial swap.\cb1 \
\ls10\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Choose the\'a0
\f2 \cf6 \cb7 \strokec6 num_rolls
\f0 \cf2 \cb3 \strokec2 \'a0and\'a0
\f2 \cf6 \cb7 \strokec6 margin
\f0 \cf2 \cb3 \strokec2 \'a0arguments carefully.\cb1 \
\pard\pardeftab720\sl340\sa200\partightenfactor0
\cf2 \cb3 You can check that your final strategy is valid by running Ok.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok -q 12\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 You can also check your exact final winrate by running\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 calc.py\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 At this point, run the entire autograder to see if there are any tests that don't pass.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 Once you are satisfied, submit to Ok to complete the project.\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf8 \cb9 \strokec8 python3\cf10 \strokec10  ok --submit\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 You can also play against your final strategy with the graphical user interface:\
\pard\pardeftab720\sl420\partightenfactor0

\f2 \cf10 \cb9 \strokec10 python3 hog_gui.py -f\
\pard\pardeftab720\sl340\sa200\partightenfactor0

\f0 \cf2 \cb3 \strokec2 The GUI will alternate which player is controlled by you.\
Congratulations, you have reached the end of your first CS 61A project! If you haven't already, relax and enjoy a few games of Hog with a friend.\
}